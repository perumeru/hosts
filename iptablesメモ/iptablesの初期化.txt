iptables -F # テーブル初期化
iptables -X # チェーンを削除
iptables -Z # パケットカウンタ・バイトカウンタをクリア
iptables -P INPUT   ACCEPT
iptables -P OUTPUT  ACCEPT
iptables -P FORWARD ACCEPT
iptables -P INPUT   DROP # すべてDROP。すべての穴をふさいでから必要なポートを空けていくのが良い。
iptables -P OUTPUT  ACCEPT
iptables -P FORWARD DROP

iptables -A INPUT -i lo -j ACCEPT # SELF -> SELF


#ip port許可設定 上から順番に
#先頭からルールが適用されます。
#設定の上書きはできない

#INPUT	入力（受信）に対するチェイン（外部から内部へ）
#OUTPUT	出力（送信）に対するチェイン（内部から外部へ）
#FORWARD	フォアード（転送）に対するチェイン（外部へ転送）
#PREROUTING	受信時に宛先アドレスを変換するチェイン。タイミングとしてはfilterで適用されるルールより手前
#POSTROUTING	送信時に送信元アドレスを変換するチェイン。これもfilterの後でパケットが送信される直前
#filterテーブル	INPUT、OUTPUT、FORWARD
#natテーブル	POSTROUTING、PREROUTING、OUTPUT
#mangleテーブル	POSTROUTING、PREROUTING、INPUT、OUTPUT、FORWARD
#Rawテーブル	PREROUTING、OUTPUT
#-A（--append）	指定チェインに1つ以上の新しいルールを追加
#-D（--delete）	指定チェインから1つ以上のルールを削除
#-P（--policy）	指定チェインのポリシーを指定したターゲットに設定
#-N（--new-chain）	新しいユーザー定義チェインを作成
#-X（--delete-chain）	指定ユーザー定義チェインを削除
#-I（--insert）	指定したチェーンにルール番号を指定してルールを挿入する。（ルール番号を省略した際にはルール番号は1に設定され、チェーンの先頭に挿入される。）
#-s (--source)	パケットの送信元を指定。特定のIP（192.168.0.1）や範囲（192.168.0.0/24）を指定する
#-d (--destination)	パケットの宛先を指定。指定方法は-sと同じ。
#-p (--protocol)	チェックされるパケットのプロトコル。 指定できるプロトコルは、 tcp、udp、icmp、allのいずれか1つか、数値。
#-i (--in-interface)	パケットを受信することになるインターフェース名。eth0、eth1など
#-o (--out-interface)	送信先インターフェース名を指定
#-j (--jump)	ターゲット（ACCEPT、DROP、REJECT）を指定
#ACCEPT	パケットの通過を許可
#DROP	パケットを破棄。応答を返さない。
#REJECT	パケットを拒否し、ICMPメッセージを返信
#REDIRECT	特定ポートにリダイレクト
#LOG	マッチしたパケットのログを記録
#DNAT	パケットの宛先アドレスを修正
#SNAT	パケットの送信元アドレスを修正。固定IPで利用
#MASQUERADE	パケットの送信元アドレスを修正。動的IPで利用
#--sport	Source Port。送信側（クライアント側）のポート番号を指定。-p tcp か -p udp の後に指定します。
#--dport	Destination Port。受信側（サーバ側）のポート番号を指定-p tcp か -p udp の後に指定します。
#--tcp-flags	TCP のときだけ指定することができる。第1引数に評価されるTCPフラグを指定し、第2引数に設定されていなければならないフラグを指定します。指定可能なフラグは、SYN、ACK、FIN、RST、URG、PSH、ALL、NONE です。複数指定する場合はカンマで区切り、引数の間は半角スペースで区切ります。（--tcp-flags SYN,RST,ACK SYN）
#--syn	TCP のときだけ指定することができる。SYNビットがセットされた、いわゆるTCPの接続確立時に、正規のスリーハンドシェイク手順を踏んだ通信を指定します。上記のSYN,RST,ACK SYNの省略形。
#--icmp-type	ICMP のタイプを指定。pingに限定した指定をする際などに指定します。
#limit	リミット拡張モジュールを読み込み。
#--limit	時間あたりに何パケットまで許可するかを指定する。second（秒）、minute（分）、hour（時）、day（日）を指定することができます。--limit の初期値は 3/hour
#--limit-burst	上記のリミットが有効になる通信の回数を指定。「○回受信したら1時間に1回に制限」という際の「○回」の部分を指定する。初期値は5。
#length	length拡張モジュールを読み込み。パケットのサイズをフラグとしてマッチさせることができる。
#--length	「○:○」という書式で「前半の○から、後半の○サイズまで」と指定する。後半の指定を外せば○以上、前半の指定を外せば○以下という指定も可能。
#state	state拡張モジュールを読み込み。パケットを追跡することでステートフル・パケットインスペクションが可能になります。詳細は後述
#--state	追跡しているパケットの状態を指定。新規か、既に許可をしたものか、などを指定する。
#NEW	全くの新参の接続
#ESTABLISHED	既に許可された接続
#RELATED	新参ではあるが許可された接続
#INVALID	パラメータの不明な無効な接続


#特定のIPアドレスからのみSSHでのアクセスを許可
iptables -A INPUT -s 192.168.xxx.xxx/32 -i eth0 -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
#全IPアドレスからSSHでのアクセスを許可
iptables -A INPUT -m state NEW -m tcp -p tcp -dport 22 -j ACCEPT

#「自分(10.0.1.3)のポート54321」へ来たら「10.0.1.1:1521」へ変換する
iptables -A PREROUTING -p tcp -m tcp --dport 54321 -j DNAT --to-destination 10.0.1.1:1521

#「10.0.1.1:1521」宛は「10.0.1.3(自分)」に変換する
iptables -A POSTROUTING -d 10.0.1.1/32 -p tcp -m tcp --dport 1521 -j SNAT --to-source 10.0.1.3

#個別に許可するLOCAL_NET
iptables -A INPUT -p tcp -s 192.168.xxx.xxx/32 -j ACCEPT 

#個別に許可するhost
iptables -A INPUT -p tcp -s 10.0.1.1/32 -j ACCEPT

#個別に許可するプロトコルとポート
iptables -A INPUT -p tcp --dport 80   -j ACCEPT

#個別に拒否するするプロトコルとポート
iptables -A INPUT -s $deny_host -m limit --limit 1/s -j LOG --log-prefix "deny_host: "
iptables -A INPUT -s $deny_host -j DROP

#こちらから求めたtcpパケットは許可する。からなず実行
iptables -A INPUT  -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT

#ポート80の通信のTOSを高スループットのものへ書き換え
iptables -t mangle -A PREROUTING -p tcp --dport 80 -j TOS --set-tos Maximize-Throughput

#ポート443の通信マークをポート80のものと合わせ、マークマッチを使って通信を破棄
iptables -t mangle -A PREROUTING -p tcp --dport 80 -j MARK --set-mark 80
iptables -t mangle -A PREROUTING -p tcp --dport 443 -j MARK --set-mark 80
iptables -t mangle -A PREROUTING -m mark --mark 80 -j DROP


1) パケットフィルタリングルールをクリア
# iptables -F
2) パケットフィルタリングルールを追加
ループバックアドレスからのアクセスを許可
# iptables -A INPUT -i lo -j ACCEPT
# iptables -A OUTPUT -o lo -j ACCEPT
不特定ホストから自ホストへのPINGを許可
# iptables -A INPUT -p icmp --icmp-type echo-request -d $localhostIP -j ACCEPT
# iptables -A OUTPUT -p icmp --icmp-type echo-reply -s $localhostIP -j ACCEPT
自ホストから不特定ホストへのPINGを許可
# iptables -A OUTPUT -p icmp --icmp-type echo-request -s $localhostIP -j ACCEPT
# iptables -A INPUT -p icmp --icmp-type echo-reply -d $localhostIP -j ACCEPT
特定IPから自ホストへのSSHを許可
# iptables -A INPUT -p tcp -s $TrustIP -d $localhostIP --dport 22 -j ACCEPT
# iptables -A OUTPUT -p tcp -s $localhostIP --sport 22 -d $TrustIP -j ACCEPT
任意のネットワークからのHTTPへのアクセスを許可
# iptables -A INPUT -p tcp -s 0.0.0.0/0 -d $localhostIP --dport 80 -j ACCEPT
# iptables -A OUTPUT -p tcp -s $localhostIP --sport 80 -d 0.0.0.0/0 -j ACCEPT
任意のネットワークからのFTP接続を許可
# iptables -A INPUT -p tcp -d $localhostIP --dport 21 -j ACCEPT
# iptables -A OUTPUT -p tcp -s $localhostIP --sport 21 -j ACCEPT

# iptables -A INPUT -p tcp -d $localhostIP --dport 20 -j ACCEPT
# iptables -A OUTPUT -p tcp -s $localhostIP --sport 20 -j ACCEPT
任意のネットワークからのSMTP接続を許可
# iptables -A INPUT -p tcp -d $localhostIP --dport 25 -j ACCEPT
# iptables -A OUTPUT -p tcp -s $localhostIP --sport 25 -j ACCEPT
任意のネットワークからのメール受信(POP)を許可
# iptables -A INPUT -p tcp -s $TrustIP -d $localhostIP --dport 110 -j ACCEPT
# iptables -A OUTPUT -p tcp -s $localhostIP -d $TrustIP --sport 110 -j ACCEPT
DNSの利用を許可
# iptables -A INPUT -p udp --sport 53 -j ACCEPT
# iptables -A OUTPUT -p udp --dport 53 -j ACCEPT

# iptables -A INPUT -p tcp --sport 53 -j ACCEPT
# iptables -A OUTPUT -p tcp --dport 53 -j ACCEPT
ログ取得設定
# iptables -N LOGGING
# iptables -A LOGGING -j LOG --log-level warning --log-prefix "DROP:" -m limit
# iptables -A LOGGING -j DROP
# iptables -A INPUT -j LOGGING
3) ポリシーを設定 -> その他全ての接続を拒否
# iptables -P INPUT DROP
# iptables -P OUTPUT DROP
# iptables -P FORWARD DROP
4) iptablesの保存と再起動
# /etc/init.d/iptables save
Saving firewall rules to /etc/sysconfig/iptables: [ OK ]

# /etc/init.d/iptables restart
Flushing firewall rules: [ OK ]
Setting chains to policy ACCEPT: mangle filter nat [ OK ]
Unloading iptables modules: [ OK ]
Applying iptables firewall rules: [ OK ]

すべての着信HTTPおよびHTTPSを許可する
HTTPトラフィックとHTTPSトラフィックの両方を許可する場合は、* multiport *モジュールを使用して、両方のポートを許可するルールを作成できます。 すべての着信HTTPおよびHTTPS（ポート443）接続を許可するには、次のコマンドを実行します。

sudo iptables -A INPUT -p tcp -m multiport --dports 80,443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
sudo iptables -A OUTPUT -p tcp -m multiport --dports 80,443 -m conntrack --ctstate ESTABLISHED -j ACCEPT
確立された HTTPおよびHTTPS接続の発信トラフィックを許可する2番目のコマンドは、 `+ OUTPUT `ポリシーが ` ACCEPT +`に設定されていない場合にのみ必要です。
